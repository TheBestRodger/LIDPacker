//////////////////////////////////////////////////////////////////////////////
// scoord.hpp
// Copyright (c) 2017 by Alexander Kuslya <kuslya.alexander@gmail.com>



#ifndef SCIENCE_GEOMETRY_COORD_D3_SCOORD_HPP_INCLUDED__
#define SCIENCE_GEOMETRY_COORD_D3_SCOORD_HPP_INCLUDED__


#include <science/core/type.hpp>
#include <science/geometry/coord/predefine.hpp>

#include <math.h>
#include <assert.h>
#include <ostream>



//////////////////////////////////////////////////////////////////////////
namespace science {


/* Функция для корректного ограничения значений угла диапазоном [-180; 180] */
//////////////////////////////////////////////////////////////////////////////
sreal_t& restrict_angle(sreal_t& angle);


//////////////////////////////////////////////////////////////////////////
namespace d3 {


//////////////////////////////////////////////////////////////////////////
namespace detail {


/* Вспомагательный базовый класс для реализации модели инициализации сфяерических коодинат */
//////////////////////////////////////////////////////////////////////////////
class SCoordAssign
{
public:
    /* Функция присвоения значений полям сферической координаты  */
    /* значениями полей координаты в прямоугольной системе. */    
    SCoord& assign_from(RCoord const& rc);
};


} /* namespace detail */


/* 
    Функция для корректного ограничения значений углов сферической координаты 
    диапазоном [-180; 180] 
*/
//////////////////////////////////////////////////////////////////////////////
SCoord & restrict(SCoord& sc);



/* Координата в сферической системе координат */
/////////////////////////////////////////////////////////////////////
struct SCoord : private detail::SCoordAssign
{
    sreal_t d;   /* Расстояние до центра координат */
    sreal_t p;   /* Азимут */
    sreal_t t;   /* Зенит */


    /* Конструктор по-умолчанию. Все поля равны нулю. */
    SCoord();

    /* Конструктор с присвоением всем полям значений */
    SCoord(sreal_t const d_, sreal_t const p_, sreal_t const t_);
		
    /* 
        Конструктор с присвоением всем полям значений из элементов входного массива 
    
        Элементы в массиве должны идти в следующем порядке: 
        [0] - расстояние до начала координат
        [1] - азимут
        [2] - зенит
    */
    explicit SCoord(sreal_t const ptr[3]);
		
    /* Конструктор с присвоеним всем полям значений из элементов входной координаты в прямоугольной системе координат */
    explicit SCoord(RCoord const& rc);
	
    /* Оператор присвоения всем полям значений из элементов входной координаты в прямоугольной системе координат */
    SCoord& operator = (RCoord const& rc);
	
    /* Функция для инициализации всех полей координаты заданными значениями */
    SCoord& assign(sreal_t const d_, sreal_t const p_, sreal_t const t_);

    /* Функция для инициализации всех полей координаты заданными значениями из элементов массива */
    SCoord& assign(sreal_t const ptr[3]);

    /* 
        Константная веврсия оператор поэлементого доступа к полям координаты.  

		Элементы индексируются следующем порядке:
		[0] - расстояние до начала координат
		[1] - азимут
		[2] - зенит

        Имеется проверка на значение индекса!
    */
    double const& operator[](size_t const i) const;

    /*
        Оператор поэлементого доступа к полям координаты.

        Элементы индексируются следующем порядке:
        [0] - расстояние до начала координат
        [1] - азимут
        [2] - зенит

        Имеется проверка на значение индекса!
    */
    double& operator[](size_t const i);
};


} /* namespace d3 */



//////////////////////////////////////////////////////////////////////////
namespace d2 {



//////////////////////////////////////////////////////////////////////////
namespace detail {


/* Вспомагательный базовый класс для реализации модели инициализации сфяерических коодинат */
//////////////////////////////////////////////////////////////////////////////
class SCoordAssign
{
public:
    /* Функция присвоения значений полям сферической координаты  */
    /* значениями полей координаты в прямоугольной системе. */
    SCoord& assign_from(RCoord const& rc);
};


} /* namespace detail */


/*
    Функция для корректного ограничения значений углов сферической координаты
    диапазоном [-180; 180]
*/
//////////////////////////////////////////////////////////////////////////////
SCoord & restrict(SCoord& sc);



/* Координата в сферической системе координат */
/////////////////////////////////////////////////////////////////////
struct SCoord : private detail::SCoordAssign
{
    sreal_t r;   /* Полярный радиус */
    sreal_t f;   /* Полярный угол */


    /* Конструктор по-умолчанию. Все поля равны нулю. */
    SCoord();

    /* Конструктор с присвоением всем полям значений */
    SCoord(sreal_t const r, sreal_t const f);

    /*
        Конструктор с присвоением всем полям значений из элементов входного массива

        Элементы в массиве должны идти в следующем порядке:
        [0] - полярный радиус
        [1] - полярный угол
    */
    explicit SCoord(sreal_t const ptr[2]);

    /* Конструктор с присвоеним всем полям значений из элементов входной координаты в прямоугольной системе координат */
    explicit SCoord(RCoord const& rc);

    /* Оператор присвоения всем полям значений из элементов входной координаты в прямоугольной системе координат */
    SCoord& operator = (RCoord const& rc);

    /* Функция для инициализации всех полей координаты заданными значениями */
    SCoord& assign(sreal_t const r, sreal_t const f);

    /* Функция для инициализации всех полей координаты заданными значениями из элементов массива */
    SCoord& assign(sreal_t const ptr[2]);

    /*
        Константная веврсия оператор поэлементого доступа к полям координаты.

        Элементы индексируются следующем порядке:
        [0] - полярный радиус
        [1] - полярный угол

        Имеется проверка на значение индекса!
    */
    double const& operator[](size_t const i) const;

    /*
        Оператор поэлементого доступа к полям координаты.

        Элементы индексируются следующем порядке:
		[0] - полярный радиус
		[1] - полярный угол

        Имеется проверка на значение индекса!
    */
    double& operator[](size_t const i);
};


} /* namespace d2 */


} /* namespace science */





/////////////////////////////////////////////////////////////////////
template <
	typename CharT
	, typename TraitsT
>
std::basic_ostream<CharT, TraitsT>& operator << (
	std::basic_ostream<CharT, TraitsT>& os
	, science::d3::SCoord const& sc
	)
{
	os << '[' << sc.d << ", " << sc.p << ", " << sc.t << ']';
	return os;
}


/////////////////////////////////////////////////////////////////////
template <
	typename CharT
	, typename TraitsT
>
std::basic_ostream<CharT, TraitsT>& operator << (
	std::basic_ostream<CharT, TraitsT>& os
	, science::d2::SCoord const& sc
	)
{
	os << '[' << sc.r << ", " << sc.f << ']';
	return os;
}


/////////////////////////////////////////////////////////////////////
template <
	typename CharT
	, typename TraitsT
>
std::basic_istream<CharT, TraitsT>& operator >> (
	std::basic_istream<CharT, TraitsT>& is
	, science::d3::SCoord& sc
	)
{
    is >> sc.d >> sc.p >> sc.t;
	return is;
}


/////////////////////////////////////////////////////////////////////
template <
	typename CharT
	, typename TraitsT
>
std::basic_istream<CharT, TraitsT>& operator >> (
	std::basic_istream<CharT, TraitsT>& is
	, science::d2::SCoord& sc
	)
{
    is >> sc.r >> sc.f;
	return is;
}



#endif  SCIENCE_GEOMETRY_COORD_D3_SCOORD_HPP_INCLUDED__