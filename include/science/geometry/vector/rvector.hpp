/*!*****************************************************************************
	@file rvector.hpp				               
	@author Kuslya A.M.
	@date 2023/06/24
	@copyright Copyright (c) 2023 by Alexander Kuslya <alexander.kuslya@gmail.com>
	@brief Модуль реализации необходимых классов и методов для работы с векторами
	в трехмерном Декартовом пространстве.
	
	Модуль включает в свой состав необходимые классы и функции для реализации
	векторной геометрии и линейной алгебры в трехмерном Декартовом пространстве,
	а именно: работу с трехмерными векторами, включая все необходимые для этого
	операторы, а также методы их преобразования к сферической системе координат,
	получение длинны вектора и его нормализацию.
*******************************************************************************/

#ifndef __LIBSCIENCE_GEOMETRY_VECTOR_RVECTOR_HPP_INCLUDED__
#define __LIBSCIENCE_GEOMETRY_VECTOR_RVECTOR_HPP_INCLUDED__


#include <science/geometry/vector/predefine.hpp>
#include <science/geometry/point/predefine.hpp>
#include <science/geometry/coord/rcoord.hpp>


/** \brief science - Common utilities library */
namespace science {

/** \brief d3 - трехмерное протранство */
namespace d3 {

/** \brief detail - вспомогательная область видимости */
namespace detail {


/* Вспомогательный базовый класс для реализации модели инициализации вектора в сферической системе координат */
//////////////////////////////////////////////////////////////////////////////
class RVectorAssign : public RCoordAssign
{
public:
	RVector& assign_from(SVector const& sc);
};


} /* namespace detail */



/*!*****************************************************************************
	@brief Трехмерный вектор в прямоугольной системе координат
	@author Kuslya A.M.
	@version 1.0
	@date 2023/06/24
	
	Класс представляет собой тремерный вектор в прямоугольной системе координат (ПСК),
	хранящий в себе три проекции на оси ПСК, имеющий возможность двустороннего
	преобразования к сферической системе координат и набор перегруженных операторов
	для выполнения основных математических операций с векторами.
*******************************************************************************/
struct RVector 
	: public RCoord
	, public detail::RVectorAssign
{
	RVector();

	RVector(
		  sreal_t const x
		, sreal_t const y
		, sreal_t const z
	);

	explicit RVector(sreal_t const ptr[3]);

	RVector(RCoord const& rc);

	RVector(SCoord const& sc);

	RVector& operator = (SVector const& sv);

	RCoord& coord();

	RCoord const& coord() const;

	RVector operator - () const;

	RVector& operator += (RVector const& v);

	RVector& operator -= (RVector const& v);

	RVector& operator *= (sreal_t const value);

	RVector& operator /= (sreal_t const value);

	RVector& assign(
		  sreal_t const t1
		, sreal_t const t2
		, sreal_t const t3
	);

	RVector& assign(sreal_t const ptr[3]);
};



/*!***************************************************************************** 
	@brief Вычисление длины радиус-вектора
	@param v - вектор в трехмерном декартовом пространстве
	@return sreal_t - вычисленная длина
	
	Функция принмиает на вход трехмерный радиус вектор в прямоугольной системе
	координат и вычисляет его длину.
*******************************************************************************/
sreal_t const module(RVector const& v);


/*!***************************************************************************** 
	@brief Вычисление нормы (длины) радиус вектора
	@param v - вектор в трехмерном декартовом пространстве
	@return sreal_t - вычисленная длина

	Функция-обертка для функции module(). Создана исключительно из-за введения 
	нового названия, чтобы обеспечить поддержку в старых проектах, где уже \
	используется функция module().
*******************************************************************************/
sreal_t const norm(RVector const& v);


/*!*****************************************************************************
	@brief Вычисление нормы (длины) радиус вектора в плоскости OXZ
	@param v - вектор в трехмерном декартовом пространстве
	@return sreal_t - вычисленная длина

	Функция вычисляет норму двухмерного вектора - проекции исходного трехмерного
	на плоскость OXZ.
*******************************************************************************/
sreal_t const norm_xz(RVector const& v);


/*!*****************************************************************************
	@brief Вычисление нормы (длины) радиус вектора в плоскости OXY
	@param v - вектор в трехмерном декартовом пространстве
	@return sreal_t - вычисленная длина

	Функция вычисляет норму двухмерного вектора - проекции исходного трехмерного
	на плоскость OXY.
*******************************************************************************/
sreal_t const norm_xy(RVector const& v);


/*!*****************************************************************************
	@brief Вычисление нормы (длины) радиус вектора в плоскости OYZ
	@param v - вектор в трехмерном декартовом пространстве
	@return sreal_t - вычисленная длина

	Функция вычисляет норму двухмерного вектора - проекции исходного трехмерного
	на плоскость OYZ.
*******************************************************************************/
sreal_t const norm_yz(RVector const& v);


/*!***************************************************************************** 
	@brief Нормирование трехмерного вектора
	@param v - нормируемый вектор
	@return RVector нормированный вектор
	
	Функция принимает на вход трехмерный вектор в прямоугольной системе координат
	и возвращает его нормированную версию. Сам вектор, при этом, тоже подлежит
	нормированию.
*******************************************************************************/
RVector& normalize(RVector& v);


/*!*****************************************************************************
	@brief Нормирование трехмерного вектора
	@param v - нормируемый вектор
	@return RVector нормированный вектор

	Функция принимает на вход трехмерный вектор в прямоугольной системе координат
	и возвращает его нормированную версию. Сам вектор, при этом, остается неизменным.
*******************************************************************************/
RVector normalized(RVector const& v);


/*!***************************************************************************** 
	@brief Скалярное произведение векторов
	@param vl - первый вектор, участвующий в произведении
	@param vr - второй вектор, участвующий в произведении
	@return sreal_t - результат скалярного произведения (скаляр).
	
	Функция осуществляет скалярное произведение двух векторов vl и vr 
	вида S = vl * vr и возвращает полученное в результате вычисления скалярное
	значение.
*******************************************************************************/
sreal_t const scalar_prod(
	  RVector const& vl
	, RVector const& vr
);


/*!***************************************************************************** 
	@brief Векторное произведение векторов
	@param vl - первый вектор, участвующий в произведении
	@param vr - второй вектор, участвующий в произведении
	@return RVector - результат векторного произведения (вектор).
	
	Функция осуществляет векторное произведение двух векторов vl и vr по правилам
	математики вида V = vl x vr и возвращает полученный в результате вычисления
	вектор, ортогональный плоскости, образованное двумя другими векторами.
*******************************************************************************/
RVector const cross_prod(
	  RVector const& vl
	, RVector const& vr
);


/*!***************************************************************************** 
	@brief Перегруженный оператор суммы векторов
	@param lv - первый вектор - слогаемое
	@param rv - второй вектор - слогаемое
	@return RVector - вектор-сумма двух векторов.
	
	Оператор суммы осуществляет сложение двух векторов в трехмерной прямоугольной
	системе координат.
*******************************************************************************/
RVector operator + (
	  RVector const& lv
	, RVector const& rv
);


/*!*****************************************************************************
	@brief Перегруженный оператор разности векторов
	@param lv - первый вектор - уменьшаемое
	@param rv - второй вектор - вычитаемое
	@return RVector - вектор-разность двух векторов.

	Оператор разности осуществляет вычистание двух векторов в трехмерной прямоугольной
	системе координат.
*******************************************************************************/
RVector operator - (
	  RVector const& lv
	, RVector const& rv
);


/*!*****************************************************************************
	@brief Перегруженный оператор разности точек
	@param lp - первая точка - уменьшаемое
	@param rp - вторая точка - вычитаемое
	@return RVector - вектор-разность двух двух точек.

	Оператор осуществляет вычисление координат вектора, начинающегося в точке lp 
	и заканчивающегося в точке rp.
*******************************************************************************/
RVector operator - (
	  RPoint const& lp
	, RPoint const& rp
);


/*!*****************************************************************************
	@brief Перегруженный оператор произведения вектора и скаляра
	@param v - умножаемый вектор
	@param constant - скаляр, на которое умножается вектор
	@return RVector - вектор, полученный в результате умножения на скаляр

	Оператор осуществляет вычисление вектора, получаемого при умножении вектора
	на скаляр.
*******************************************************************************/
RVector operator * (
	  RVector const& v
	, sreal_t const constant
);


/*!*****************************************************************************
	@brief Перегруженный оператор деления вектора на скаляр
	@param v - делимый вектор
	@param constant - скаляр, на который делится вектор
	@return RVector - вектор, полученный в результате деления вектора на скаляр

	Оператор осуществляет вычисление вектора, получаемого при делении вектора
	на скаляр.
*******************************************************************************/
RVector operator / (
	  RVector const& v
	, sreal_t const constant
);

} /* namespace d3 */


} /* namespace science */


#endif  // __LIBSCIENCE_GEOMETRY_VECTOR_RVECTOR_HPP_INCLUDED__
