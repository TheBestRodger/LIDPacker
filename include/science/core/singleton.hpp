/*!*****************************************************************************
	@file singleton.hpp				               
	@author Kuslya A.M.
	@date 2023/01/29
	@copyright Copyright (c) 2023 by Alexander Kuslya <alexander.kuslya@gmail.com>
	@brief Реализация паттерна "одиночка" различными способами
*******************************************************************************/

#ifndef SCIENCE_SINGLETON_HPP_INCLUDED_
#define SCIENCE_SINGLETON_HPP_INCLUDED_

#include <stdexcept>
#include <typeinfo>
#include <sstream>
#include <assert.h>


////////////////////////////////////////////////////////////////////////////
namespace science {


/*!*****************************************************************************
	@brief Стандартный класс одиночка, такой как в Ogre3D (+-)
	@author Kuslya A.M.
	@version 1.0
	@date 2023/01/29
	
	Шаблонный класс одиночка предназначен для организации контроля возмоности
	иметь одновременно лишь один экземпляр наследника данного класса.
	При наследовании класса необходимо в качестве спецификатора типа шаблона
	указаывать тип класса-наследника.
*******************************************************************************/
template<typename DerivedT>
class Singleton
{
	/** \brief Запрет на копирование объектов */
	Singleton(Singleton const&);
    Singleton const& operator = (Singleton const&);

protected:
	/** \brief Указатель на созданный экземпляр класса */
	static DerivedT *instance_;

public:
	/** \brief Конструктор по-умолчанию */
	Singleton()
	{
        assert(instance_ == 0);

		instance_ = static_cast<DerivedT*>(this);
	}

	/*!***************************************************************************** 
		@brief Получение ссылки на имеющийся экземпляр класса
		@return DerivedT& ссылка на имеющийся экзепляр класса
		
		Функция позволяет получить доступ к ранее созданному экземпляру класса
		по ссылке.
	*******************************************************************************/
    static DerivedT& instance()
    {
        assert(instance_ != 0);
        return *instance_;
    }

	/*!*****************************************************************************
		@brief Получение указателя на имеющийся экземпляр класса
		@return DerivedT* указатель на имеющийся экзепляр класса

		Функция позволяет получить доступ к ранее созданному экземпляру класса
		по указателю.
	*******************************************************************************/
    static DerivedT* instance_ptr()
    {
        return instance_;
    }


	/** \brief Деструктор по-умолчанию */
	virtual ~Singleton()
	{
        assert(instance_ != 0);

        instance_ = 0;
	}
};


/** \brief Экземпляр созданного объекта */
template<typename DerivedT>
DerivedT* Singleton<DerivedT>::instance_ = 0;


/*!*****************************************************************************
	@brief Класс одиночка, с автоматической генерацией объекта при обращении
	@author Kuslya A.M.
	@version 1.0
	@date 2023/02/10

	Шаблонный класс одиночка предназначен для организации контроля возмоности
	иметь одновременно лишь один экземпляр наследника данного класса.
	При наследовании класса необходимо в качестве спецификатора типа шаблона
	указаывать тип класса-наследника. Отличается от простого класса Singleton
	тем, что при вызове функций instance или instance_ptr создает объект.
*******************************************************************************/
template<typename DerivedT>
class AutoSingleton
{
	/** \brief Запрет на копирование объектов */
	AutoSingleton(AutoSingleton const&);
	AutoSingleton const& operator = (AutoSingleton const&);

protected:
	/** \brief Указатель на созданный экземпляр класса */
	static DerivedT* instance_;

public:
	/** \brief Конструктор по-умолчанию */
	AutoSingleton()
	{
		assert(instance_ == 0);

		instance_ = static_cast<DerivedT*>(this);
	}

	/*!*****************************************************************************
		@brief Получение ссылки на имеющийся экземпляр класса
		@return DerivedT& ссылка на имеющийся экзепляр класса

		Функция позволяет получить доступ к ранее созданному экземпляру класса
		по ссылке. Если он не был создан, то создается при вызове.
	*******************************************************************************/
	static DerivedT& instance()
	{
		if (instance_ == 0)
			instance_ = new DerivedT;

		return *instance_;
	}

	/*!*****************************************************************************
		@brief Получение указателя на имеющийся экземпляр класса
		@return DerivedT* указатель на имеющийся экзепляр класса

		Функция позволяет получить доступ к ранее созданному экземпляру класса
		по указателю. Если он не был создан, то создается при вызове.
	*******************************************************************************/
	static DerivedT* instance_ptr()
	{
		if (instance_ == 0)
			instance_ = new DerivedT;

		return instance_;
	}


	/** \brief Деструктор по-умолчанию */
	virtual ~AutoSingleton()
	{
		assert(instance_ != 0);

		instance_ = 0;
	}
};


/** \brief Экземпляр созданного объекта */
template<typename DerivedT>
DerivedT* AutoSingleton<DerivedT>::instance_ = 0;

}

#endif