/*!*****************************************************************************
	@file interpolator.hpp				               
	@author Kuslya A.M.
	@date 2023/05/25
	@copyright Copyright (c) 2023 by Alexander Kuslya <alexander.kuslya@gmail.com>
	@brief Модуль интерполяции
	
	Данный модуль содержит определение класса многомерной линейной интерполяции
    Interpolator, предназначенного для работы со специализированными входными
    файлами в текстовом и бинарном форматах.
*******************************************************************************/


#ifndef __LIBSCIENCE_INTERPOLATOR_HPP_INCLUDED__
#define __LIBSCIENCE_INTERPOLATOR_HPP_INCLUDED__


#include <science/core/type.hpp>
#include <science/math/interpolation/common.h>

#include <string>
#include <vector>

/** \brief science - Common utilities library */
namespace science {

/*!*****************************************************************************
	@brief Модуль многомерной линейной интерполяции
	@author Kuslya A.M.
	@version 1.0
	@date 2023/03/01
	
	Класс-обертка для функционала многоменрной линейной интерполяции, работающей
    как с текстовым, так и с бинарным входным потоком данных
*******************************************************************************/
class Interpolator
{
    /** \brief Уникальный идентификатор на блок данных для интерполяции */
    int identifier_;

    /** \brief Счетчик ссылок на один и тотже блок данных */
	int* ref_counter;

    /** \brief Имя загруженного файла */
    std::string fname_;
    /* \brief Режим работы интерполятора false - атоматический | true - ручной*/
    bool mode;
public:
    /** \brief Конструктор по-умолчанию */
    Interpolator();

    /*!***************************************************************************** 
    	@brief Конструктор с аргументами
		@param fname - строка с именем файла
		@param f - формат входного файла: бинарный или текстовый
    	
    	Конструктор, инициализирующий модуль интерполяции файлом с именем fname 
        заданного формата f.
    *******************************************************************************/
    Interpolator(char const* fname, FormatFile const f = TEXT);


    /*!*****************************************************************************
        @brief Конструктор с аргументами.
        @param amount - количество аргументов, которое будет добавленно.

        Конструктор, инициализирующий модуль для создание данных для интерполяции.
    *******************************************************************************/
    Interpolator(unsigned const amount);


    /** \brief Конструктор копирования */
	Interpolator(Interpolator const& other);


    /** \brief Стандартный деструктор */
    ~Interpolator();

    /*!***************************************************************************** 
    	@brief Инициализация данных файлом
		@param fname - строка с именем файла
		@param f - формат входного файла: бинарный или текстовый
    	
    	Функция инициализации модуль интерполяции данными из файла с именем fname 
		заданного формата f.
    *******************************************************************************/
    void set_file(char const* fname, FormatFile const f = TEXT);


    /*!*****************************************************************************
        @brief Инициализация данных файлом
        @param fname - строка с именем файла
        @param f - формат входного файла: бинарный или текстовый

        Функция инициализации модуль интерполяции данными из файла с именем fname
        заданного формата f.
    *******************************************************************************/
    void set_file(const std::string & fname, FormatFile const f = TEXT);


    /*!*****************************************************************************
        @brief Инициализация данных
        @param amount_of_args - заданное количество аргументов
        Функция для создание аргументов без файла.
    *******************************************************************************/
    void make_data(int const  amount_of_args);

    /*!***************************************************************************** 
    	@brief Функциональный оператор с одним аргументом
    	@param arg1 аргумент интерполяции
    	
    	Оператор осуществляет вызов функции одномерной интерполяции с аргументом arg1.
    *******************************************************************************/
    sreal_t const operator() (sreal_t const arg1) const;


    /*!*****************************************************************************
        @brief Перегруженная версия функционального оператора
		@param arg1 первый аргумент интерполяции
		@param arg2 второй аргумент интерполяции

        Осуществляет вызов функции двумерной интерполяции с аргументами arg1 и arg2.
    *******************************************************************************/
    sreal_t const operator() (
          sreal_t const arg1
        , sreal_t const arg2
        ) const;


    /*!*****************************************************************************
        @brief Перегруженная версия функционального оператора
        @param arg1 первый аргумент интерполяции
		@param arg2 второй аргумент интерполяции
		@param arg3 третий аргумент интерполяции

        Осуществляет вызов функции многомерной интерполяции с тремя аргументами.
    *******************************************************************************/
    sreal_t const operator() (
          sreal_t const arg1
        , sreal_t const arg2
        , sreal_t const arg3
        ) const;


    /*!*****************************************************************************
        @brief Перегруженная версия функционального оператора
        @param arg1 первый аргумент интерполяции
        @param arg2 второй аргумент интерполяции
		@param arg3 третий аргумент интерполяции
		@param arg4 четвертый аргумент интерполяции

        Осуществляет вызов функции многомерной интерполяции с четырьмя аргументами.
    *******************************************************************************/
    sreal_t const operator() (
          sreal_t const arg1
        , sreal_t const arg2
        , sreal_t const arg3
        , sreal_t const arg4
        ) const;


    /*!*****************************************************************************
        @brief Перегруженная версия функционального оператора
        @param arg1 первый аргумент интерполяции
        @param arg2 второй аргумент интерполяции
        @param arg3 третий аргумент интерполяции
		@param arg4 четвертый аргумент интерполяции
		@param arg5 пятый аргумент интерполяции

        Осуществляет вызов функции многомерной интерполяции с пятью аргументами.
    *******************************************************************************/
    sreal_t const operator() (
          sreal_t const arg1
        , sreal_t const arg2
        , sreal_t const arg3
        , sreal_t const arg4
        , sreal_t const arg5
        ) const;


    /*!*****************************************************************************
        @brief Перегруженная версия функционального оператора
        @param arg1 первый аргумент интерполяции
        @param arg2 второй аргумент интерполяции
        @param arg3 третий аргумент интерполяции
        @param arg4 четвертый аргумент интерполяции
		@param arg5 пятый аргумент интерполяции
		@param arg6 шестой аргумент интерполяции

        Осуществляет вызов функции многомерной интерполяции с шестью аргументами.
    *******************************************************************************/
    sreal_t const operator() (
          sreal_t const arg1
        , sreal_t const arg2
        , sreal_t const arg3
        , sreal_t const arg4
        , sreal_t const arg5
        , sreal_t const arg6
        ) const;


    /*!*****************************************************************************
        @brief Перегруженная версия функционального оператора
        @param arg_arr массив аргументов
        @param size размер массива аргументов

        Универсальный функциональный оператор, пердназначенный для работы с произвольным
        количеством аргументов интерполяции.
    *******************************************************************************/
    sreal_t const operator() (
          sreal_t const* arg_arr
        , unsigned const size
        ) const;


    /** \brief Оператор копирования */
	Interpolator& operator = (Interpolator const& r);


    /*!***************************************************************************** 
    	@brief Получение имени связанного с данными файла
    	@return string имя файла
    	
    	Функция возвращает имя файла, из которого была проведена загрузка данных.
        Если загрузка данных не была проведена, то возращает пустую строку
    *******************************************************************************/
	std::string const& fname() const;


    /*!***************************************************************************** 
    	@brief Выгрузка данных для интерполяции в файл
		@param fname - имя файла, в который осуществляется выгрузка.
		@param f - формат выходного файла
    	
    	Функция осуществляет выгрузку данных в заданный файл fname в заданном 
        формате f. Если указан бинарный фортам, а расширение файла отличается от .lid, 
        то оно становится .lid. Если указан текстовый фортам, а расширение файла 
        отличается от .dat, то оно становится .dat.
    *******************************************************************************/
	void dump(char const* fname, FormatFile const f = TEXT);


    /*!*****************************************************************************
        @brief Выгрузка данных для интерполяции в файл
        @param fname - имя файла, в который осуществляется выгрузка.
        @param f - формат выходного файла

        Функция осуществляет выгрузку данных в заданный файл fname в заданном
        формате f. Если указан бинарный фортам, а расширение файла отличается от .lid,
        то оно становится .lid. Если указан текстовый фортам, а расширение файла
        отличается от .dat, то оно становится .dat.
    *******************************************************************************/
    void dump(const std::string & fname, FormatFile const f = TEXT);


    /*!*****************************************************************************
        @brief Добавление нового аргумента (шкалы).
        @param pos - позиция установки аргумента.
        @param arg_arr - массив значений аргументов (шкалы).
        @param size - размер массива

        Функция приннимаемт массив значений аргумента (шкалы) arg_arr и расширяет текущие
        данные или создает новые при их отсутствии.
    *******************************************************************************/
    void set_argument(int const pos, sreal_t const* arg_arr, unsigned const size);


    /*!*****************************************************************************
        @brief Добавление нового аргумента (шкалы).
        @param pos - позиция установки аргумента.
        @param arg_arr - массив значений аргументов (шкалы).
        @param size - размер массива

        Функция приннимает вектор типа sreal_t.
    *******************************************************************************/
    void set_argument(int const pos, const std::vector<sreal_t> &vector_arg_arr);


    /*!*****************************************************************************
        @brief Установление точек данных.
        @param arg_ndat - точки данных (значения таблицы).

        Функция приннимаемт строку arg_ndat и преобразовывает ее в массив числовых
        данных, используемых в качестве значений для интерполяции.
    *******************************************************************************/
    void set_values(char const* arg_ndat);


    /*!*****************************************************************************
        @brief Установление точек данных.
        @param arg_ndat - точки данных (значения таблицы).
        @param size_k - длинна массива.

        Функция приннимаемт массив типа sreal_t и его размер и использует его в 
        качестве числовых данных для интерполяции.
    *******************************************************************************/
    void set_values(sreal_t const* arg_ndat, unsigned size_k);


    /*!*****************************************************************************
        @brief Установление точек данных.
        @param arg_ndat - точки данных (значения таблицы).

        Функция приннимает вектор типа sreal_t.
    *******************************************************************************/
    void set_values(const std::vector<sreal_t> &vector_data);


    /*!*****************************************************************************
        @brief Установление описание файла
        @param description_file - описание файла

        @note const wchar_t* используется расширенный тип данных
    *******************************************************************************/
    void set_description_file(const wchar_t* description_file);


    /*!*****************************************************************************
        @brief Установление описание файла
        @param description_file - описание файла

        @note const std::wstring* используется расширенный тип данных
    *******************************************************************************/
    void set_description_file(const std::wstring & description_file);


    /*!*****************************************************************************
        @brief Установление описания конкретного аргумента
        @param pos - позиция аргумента
        @param description_arg - описание аргумента

        @note const std::wchar_t* используется расширенный тип данных
        Так же если не указать описание, но указать имя, то автоматически имя будет описанием
    *******************************************************************************/
    void set_description_argument(const int pos, const wchar_t* description_arg);


    /*!*****************************************************************************
        @brief Установление описания конкретного аргумента
        @param pos - позиция аргумента
        @param description_arg - описание аргумента

        @note const std::wstring используется расширенный тип данных
        Так же если не указать описание, но указать имя, то автоматически имя будет описанием
    *******************************************************************************/
    void set_description_argument(const int pos, const std::wstring & description_arg);


    /*!*****************************************************************************
        @brief Установление имени конкретного аргумента
        @param pos - позиция аргумента
        @param name_arg - имя аргумента

        @note const wchar_t* используется расширенный тип данных
    *******************************************************************************/
    void set_name_argument(const int pos, const wchar_t* name_arg);


    /*!*****************************************************************************
        @brief Установление имени конкретного аргумента
        @param pos - позиция аргумента
        @param name_arg - имя аргумента

        @note const std::wstring используется расширенный тип данных
    *******************************************************************************/
    void set_name_argument(const int pos, const std::wstring& name_arg);

    /*!*****************************************************************************
        @brief Установление описание таблицы
        @param description_file - описание таблицы

        @note const const wchar_t* используется расширенный тип данных
    *******************************************************************************/
    void set_description_table(const wchar_t* description_table);

    /*!*****************************************************************************
        @brief Установление описание таблицы
        @param description_table - описание таблицы

        @note const std::wstring используется расширенный тип данных
    *******************************************************************************/
    void set_description_table(const std::wstring& description_table);

    /*!*****************************************************************************
        @brief Возвращает аргумент со значениями по ключу.  
        @param int key - ключ аргумента и его порядок (место).
        @return const std::vector<sreal_t> - вектро значений аргументаю.
    *******************************************************************************/
    const std::vector<sreal_t> get_argument(int key) const;


    /*!*****************************************************************************
        @brief Возвращает все табличные значения.
        @return const std::vector<sreal_t> - одномерный вектро значений.
    *******************************************************************************/
    const std::vector<sreal_t> get_values() const;


    /*!*****************************************************************************
        @brief Количество аргументов.
        @return const int - число аргументов в считанном файле.
        @note
    *******************************************************************************/
    const int get_arguments_count() const;


    /*!*****************************************************************************
        @brief Возвращает описание файла.
        @return  const std::wstring - Описания файла.

    *******************************************************************************/
    const std::wstring get_description_file() const;


    /*!*****************************************************************************
        @brief Возвращает описание аргумента по его позиции.
        @param int key - ключ аргумента и его порядок (место).
        @return const std::wstring - Описание аргумента.

    *******************************************************************************/
    const std::wstring get_description_argument(int pos) const;


    /*!*****************************************************************************
        @brief Возвращает имя аргумента.
        @param int key - ключ аргумента и его порядок (место).
        @return const std::wstring - Имя аргумента.

    *******************************************************************************/
    const std::wstring get_name_argument(int pos) const;


    /*!*****************************************************************************
        @brief Возвращает описание таблицы.
        @return const std::wstring - Описания таблицы.

    *******************************************************************************/
    const std::wstring get_description_table() const;

private:
    /** \brief Уменьшение счетчика ссылок на одиницу */
	void countdown();

    /** \brief Выгрузка данных из памяти с последующей ее очисткой */
	void free();

    /** \brief Перевод структуры типа Scale* в вектор */
    const std::vector<sreal_t> Scale_to_stdVector(const Scale* array, int size) const;
};

} /* namespace science */


#endif  // __LIBSCIENCE_INTERPOLATOR_HPP_INCLUDED__
